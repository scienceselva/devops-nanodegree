#      ***************    this YML only has launch configuration *****************
#             // Parameters for the resources   //

Parameters:
    EnvironmentName:
        Description: Selvakumar  Udacity devops engg aws project 2
        Type: String
    VpcCIDR:
        Description: For IP range of CIDR notation
        Type: String
        Default: 10.0.0.0/26
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone in launchparm.json
        Type: String
        Default: 10.0.0.0/28
    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone in launchparm.json
        Type: String
        Default: 10.0.0.16/28
    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone in launchparm.json
        Type: String
        Default: 10.0.0.32/28
    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone in launchparm.json
        Type: String
        Default: 10.0.0.48/28

#       //   resource def list //
#    the steps given is below scripts are only for launch configuration  { LB and other are done in a separate file}
#    1) create VPC 
#       create a InternetGateway (IG) 
#       attach it to the VPC    
Resources:
    VPC: 
            Type: AWS::EC2::VPC
            Properties:
                CidrBlock: !Ref VpcCIDR
                EnableDnsHostnames: true
                Tags: 
                  - Key: Name 
                    Value: !Ref EnvironmentName
    InternetGateway:
            Type: AWS::EC2::InternetGateway
            Properties:
                Tags:
                  - Key: Name
                    Value: !Ref EnvironmentName
            
    InternetGatewayAttachment:
            Type: AWS::EC2::VPCGatewayAttachment
            Properties:
                InternetGatewayId: !Ref InternetGateway
                VpcId: !Ref VPC

#  2)  create 2 public subnet  
#      create 2 private subnet            

    PublicSubnet1: 
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref VPC
                AvailabilityZone: !Select [ 0, !GetAZs '' ]
                CidrBlock: !Ref PublicSubnet1CIDR
                MapPublicIpOnLaunch: true
                Tags: 
                    - Key: Name 
                      Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
    PublicSubnet2: 
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref VPC
                AvailabilityZone: !Select [ 1, !GetAZs '' ]
                CidrBlock: !Ref PublicSubnet2CIDR
                MapPublicIpOnLaunch: true
                Tags: 
                    - Key: Name 
                      Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1: 
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref VPC
                AvailabilityZone: !Select [ 0, !GetAZs '' ]
                CidrBlock: !Ref PrivateSubnet1CIDR
                MapPublicIpOnLaunch: false
                Tags: 
                    - Key: Name 
                      Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2: 
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref VPC
                AvailabilityZone: !Select [ 1, !GetAZs '' ]
                CidrBlock: !Ref PrivateSubnet2CIDR
                MapPublicIpOnLaunch: false
                Tags: 
                    - Key: Name 
                      Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

#  3)  create 2 Elastic IPs for NAT-Gateway  (each for 1 public subnet)

    NatGateway1EIP:
            Type: AWS::EC2::EIP
            DependsOn: InternetGatewayAttachment
            Properties: 
                Domain: vpc

    NatGateway2EIP:
            Type: AWS::EC2::EIP
            DependsOn: InternetGatewayAttachment
            Properties:
                Domain: vpc

#  4) create NAT-Gateway in 2 publicsubnets created above and associate to public subnet 1 and 2
    NatGateway1: 
            Type: AWS::EC2::NatGateway
            Properties: 
                AllocationId: !GetAtt NatGateway1EIP.AllocationId
                SubnetId: !Ref PublicSubnet1

    NatGateway2: 
            Type: AWS::EC2::NatGateway
            Properties:
                AllocationId: !GetAtt NatGateway2EIP.AllocationId
                SubnetId: !Ref PublicSubnet2

#  5) create public route 
#     default public Route table to IG (internet Gateway)
#     associate the public route table to public subnet 1
#     associate the public route table to public subnet 2

    PublicRouteTable:
            Type: AWS::EC2::RouteTable
            Properties: 
                VpcId: !Ref VPC
                Tags: 
                    - Key: Name 
                      Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
            Type: AWS::EC2::Route
            DependsOn: InternetGatewayAttachment
            Properties: 
                RouteTableId: !Ref PublicRouteTable
                DestinationCidrBlock: 0.0.0.0/0
                GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                RouteTableId: !Ref PublicRouteTable
                SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                RouteTableId: !Ref PublicRouteTable
                SubnetId: !Ref PublicSubnet2

#   5) create private route table 1 (for private subnet 1)  
#      NAT-Gateway (the NAT in public subnet1) - give it interet access
#      associate private route 1 table to subnet 1
#   << repeate the same for private subnet 2 >>

    PrivateRouteTable1:
            Type: AWS::EC2::RouteTable
            Properties: 
                VpcId: !Ref VPC
                Tags: 
                    - Key: Name 
                      Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
            Type: AWS::EC2::Route
            Properties:
                RouteTableId: !Ref PrivateRouteTable1
                DestinationCidrBlock: 0.0.0.0/0
                NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                RouteTableId: !Ref PrivateRouteTable1
                SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
            Type: AWS::EC2::RouteTable
            Properties: 
                VpcId: !Ref VPC
                Tags: 
                    - Key: Name 
                      Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
            Type: AWS::EC2::Route
            Properties:
                RouteTableId: !Ref PrivateRouteTable2
                DestinationCidrBlock: 0.0.0.0/0
                NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                RouteTableId: !Ref PrivateRouteTable2
                SubnetId: !Ref PrivateSubnet2   
#  for S3 bucket   

    ProfileWithRolesForApp:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            Roles:
              - selvaudacityp2s3
# output the variable to aws evet so that it can be used in launch config

Outputs: 

    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID

    VPCPublicRouteTable:
        Description: Public Routing
        Value: !Ref PublicRouteTable
        Export:
          Name: !Sub ${EnvironmentName}-PUB-RT

    VPCPrivateRouteTable1:
        Description: Private Routing AZ1
        Value: !Ref PrivateRouteTable1
        Export:
          Name: !Sub ${EnvironmentName}-PRI1-RT

    VPCPrivateRouteTable2:
        Description: Private Routing AZ2
        Value: !Ref PrivateRouteTable2
        Export:
          Name: !Sub ${EnvironmentName}-PRI2-RT

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PUB-NETS

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-NETS

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1
        Export:
          Name: !Sub ${EnvironmentName}-PUB1-SN

    PublicSubnet2: 
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2
        Export:
          Name: !Sub ${EnvironmentName}-PUB2-SN

    PrivateSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet1
        Export:
          Name: !Sub ${EnvironmentName}-PRI1-SN

    PrivateSubnet2: 
        Description: A reference to the private subnet in the 2nd Availability Zone
        Value: !Ref PrivateSubnet2
        Export:
          Name: !Sub ${EnvironmentName}-PRI2-SN 
    ProfileWithRolesForApp: 
        Description: A reference to the IAM role for s3
        Value: !Ref ProfileWithRolesForApp
        Export:
          Name: !Sub ${EnvironmentName}-IAM-ROLE           